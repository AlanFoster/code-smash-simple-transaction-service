%h3 Congratulations, your Rails server is running!

Your Rails server is made up of a set of HTTP endpoints; you can use
the #{link_to 'Rake', 'http://rake.rubyforge.org'} tool to list them:

%blockquote
  = highlight_code(:shell) { 'rake routes' }.html_safe

%p Each endpoint takes a HTTP request and returns a response formatted as #{link_to 'JSON', 'http://www.json.org'} (#{link_to 'examples', 'http://json.org/example.html'}).

%p Click #{link_to 'here', status_path} to see the response from the 'status' endpoint. It should look something like:

%blockquote
  = highlight_code(:json) { '{"status":"Everything is working!"}' }.html_safe

%h3 What now? 

%p We're going to solve some problems in a Test-Driven Development style.

%p
  The 'app' directory contains the server code. The 'specs' directory contains 'specifications',
  %em ie
  , tests describing the desired behaviour of each endpoint.

%p What you're going to do is run the tests, find a failure where an endpoint is not meeting its specification, and then write the server code to make the test pass. We call this development cycle 'red, green, refactor'.

%p There are four exercises in total; they start very simple and get more complex. 

%h3 How to run the tests

We use #{link_to 'RSpec', 'http://rspec.info'} as our test tool. To run all our specifications:

%blockquote
  = highlight_code(:shell) { 'rake spec' }.html_safe

%p When a specification fails, RSpec will tell you where the failing code is. You can then open the relevant server code in your favourite editor and get to work making the test pass!

%p Good luck.
